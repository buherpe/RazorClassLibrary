@using System.Reflection
@using System.Dynamic
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;

@if (ShowHeader)
{
    <h3>@View.GetNames()</h3>
}

@if (Loading)
{
    <div>Загрузка...</div>
}
else
{
    @if (CreateButtonVisible)
    {
        <p><button @onclick="Create" type="button" class="btn btn-primary">Создать</button></p>
    }

    @*  table-hover @ondblclick="() => TrClicked(entity)"*@
    <table class="table table-sm">
        <thead>
            <tr>
                @*<th>Открыть</th>*@
                <th>@(ChooseOneEntity ? "Выбрать" : "Открыть")</th>
                @foreach (var columnHeader in _fieldDisplayNames)
                {
                    <th>@columnHeader</th>
                }

                @if (DeleteButtonVisible)
                {
                    <th></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var entity in _entities)
            {
                <tr>
                    <td>
                        @if (ChooseOneEntity)
                        {
                            <button @onclick="() => TrClicked(entity)" type="button" class="btn btn-outline-secondary">Выбрать</button>
                        }
                        else
                        {
                            <button @onclick="() => TrClicked(entity)" type="button" class="btn btn-outline-secondary"><span class="oi oi-magnifying-glass" aria-hidden="true"></span></button>
                        }
                    </td>
                    @foreach (var key in entity.Keys)
                    {
                        <td>@(entity[key])</td>
                    }
                    @if (DeleteButtonVisible)
                    {
                        <td>
                            <button @onclick="async () => await TrClickedDelete(entity)" type="button" class="btn btn-danger">Удалить</button>
                        </td>
                    }

                </tr>
            }
        </tbody>
    </table>
}



@code {

    [Parameter]
    public IView View { get; set; }

    private List<string> _fieldDisplayNames = new();

    //private List<BaseView> _views = new();

    private List<Dictionary<string, string>> _entities = new();

    [Parameter]
    public bool CreateButtonVisible { get; set; } = true;

    public bool Loading { get; set; } = true;

    [Parameter]
    public bool ChooseOneEntity { get; set; } = false;

    [Parameter]
    public bool DeleteButtonVisible { get; set; } = true;

    [Parameter]
    public bool ShowHeader { get; set; } = true;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    public List<IEntity> Entities { get; set; } = new List<IEntity>();

    //protected override async Task OnParametersSetAsync()
    protected override async Task OnInitializedAsync()
    {
        Loading = true;

        await LoadData();

        Loading = false;
    }

    public async Task LoadData()
    {
        var props = View
            .GetType()
            .GetProperties()
            .Select(x => new
            {
                PropertyInfo = x,
                FieldAttribute = x.GetCustomAttribute<FieldAttribute>(),
                BindAttribute = x.GetCustomAttribute<RazorClassLibrary.BindAttribute>(),
            })
            .Where(x => x.FieldAttribute != null)
            .ToList();

        _fieldDisplayNames = props
            .Where(x => !x.FieldAttribute.Serviced)
            .Select(x => x.FieldAttribute.DisplayName)
            .ToList();

        Entities = await View.GetData().Cast<IEntity>().ToListAsync();

//#if DEBUG
//    await Task.Delay(500);
//#endif

        _entities = new List<Dictionary<string, string>>();

        foreach (var entity in Entities)
        {
            var viewType = View.GetType();
            var newView = Activator.CreateInstance(viewType);

            var fieldNameValue = new Dictionary<string, string>();

            foreach (var prop in props)
            {
                if (prop.BindAttribute != null)
                {
                    var relatedEntityValue = Extensions.GetPropertyValue(entity, prop.BindAttribute.Bind);
                    fieldNameValue.Add(prop.PropertyInfo.Name, $"{relatedEntityValue}");
                    continue;
                }

                var entityProp = entity.GetType().GetProperty(prop.PropertyInfo.Name);
                var entityValue = entityProp?.GetValue(entity);
                //todo проверка типов?
                var newViewProp = newView.GetType().GetProperty(prop.PropertyInfo.Name);

                if (newViewProp.SetMethod != null)
                {
                    newViewProp.SetValue(newView, entityValue);
                }

                var newViewPropValue = newViewProp.GetValue(newView);

                if (!prop.FieldAttribute.Serviced)
                {
                    fieldNameValue.Add(prop.PropertyInfo.Name, $"{newViewPropValue}");
                }
            }

            _entities.Add(fieldNameValue);
        }
    }

    public void TrClicked(Dictionary<string, string> entity)
    {
        var id = int.Parse(entity["Id"]);

        if (ChooseOneEntity)
        {
            BlazoredModal.CloseAsync(ModalResult.Ok(Entities.FirstOrDefault(x => x.Id == id)));
        }
        else
        {
            NavigationManager.NavigateTo($"/{View.GetEntityNames()}/{entity["Id"]}");
        }
    }

    public async Task TrClickedDelete(Dictionary<string, string> entity)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Удалить запись?");

        if (!confirmed)
        {
            return;
        }

        //var f = new VisitFactory();
        var f = View.GetNewFactory();
        var entity2 = await f.GetById(int.Parse(entity["Id"]));
        await f.Delete(entity2);


        //var context = new MyContext();
        //context.Remove(entity2);
        //await context.SaveChangesAsync();

        Loading = true;
        await LoadData();
        Loading = false;
    }

    public void Create()
    {
        NavigationManager.NavigateTo($"/{View.GetEntityNames()}/0");
    }
}