@using System.Reflection
@using System.Dynamic
@using System.IO
@using Microsoft.EntityFrameworkCore
@using Microsoft.JSInterop
@using System.Text
@using System.Linq.Dynamic.Core;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject DbContext _context;
@typeparam TEntity

@if (ShowHeader)
{
    <h3>@View.GetNames()</h3>
}

@if (Loading)
{
    <div>Загрузка...</div>
}
else
{
    <div class="hstack gap-3">
        @if (CreateButtonVisible)
        {
            <a class="btn btn-primary" href="@($"/{View.GetEntityNames()}/0")" role="button">
                Создать
            </a>
        }
        <div class="ms-auto">
            <div class="input-group">
                <button class="btn btn-outline-secondary" type="button"
                    disabled="@(TotalPages == 1 || CurrentPage == 1)"
                    @onclick="FirstPageClick" title="Первая страница">
                    <span>&laquo;</span>
                </button>
                <button class="btn btn-outline-secondary" type="button"
                    disabled="@(TotalPages == 1 || CurrentPage == 1)"
                    @onclick="PreviousPageClick" title="Предыдущая страница">
                    <span>&lsaquo;</span>
                </button>
                <span class="input-group-text">
                    Записей:
                    @(EntitiesTotalCount > PageSize
                        ? $"{Entities.Count} из {EntitiesTotalCount} (стр. {CurrentPage}/{TotalPages})"
                        : $"{Entities.Count}")
                </span>
                <button class="btn btn-outline-secondary" type="button"
                    disabled="@(TotalPages == 1 || CurrentPage == TotalPages || Entities.Count == 0)"
                    @onclick="NextPageClick" title="Следующая страница">
                    <span>&rsaquo;</span>
                </button>
                <button class="btn btn-outline-secondary" type="button"
                    disabled="@(TotalPages == 1 || CurrentPage == TotalPages || Entities.Count == 0)"
                    @onclick="LastPageClick" title="Последняя страница">
                    <span>&raquo;</span>
                </button>
            </div>
        </div>
        <div>
            <div class="input-group">
                <input class="form-control @(SearchTextIsDirty ? "is-dirty" : "")"
                   @bind="SearchText" @bind:event="oninput" @onkeydown="@SearchTextInputEnter"
                   placeholder="Поиск" />
                <button class="btn btn-outline-secondary" type="button"
                    @onclick="ClearSearchText" title="Очистить">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
        </div>
        <div>
            <button @onclick="DownloadFileFromStream" type="button" class="btn btn-outline-secondary"
                title="Сохранить в CSV">
                <i class="bi bi-download"></i>
            </button>
        </div>
        <div>
            <button @onclick="LoadData" type="button" class="btn btn-outline-secondary" title="Обновить">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>

    <table class="table table-sm table-bordered table-striped">
        <thead>
            <tr>
                <th>@(ChooseOneEntity ? "Выбрать" : "Открыть")</th>
                @foreach (var column in _columns)
                {
                    <th @onclick="() => OnColumnClick(column.PropertyName)">

                        <div class="hstack gap-3">
                            <div>@column.DisplayName</div>
                            <div class="ms-auto">
                                @if (SortingColumn == column.PropertyName)
                                {
                                    @if (SortingDescending)
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                }
                            </div>
                        </div>
                    </th>
                }

                @if (DeleteButtonVisible)
                {
                    <th></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var entity in _entities)
            {
                <tr>
                    <td>
                        @if (ChooseOneEntity)
                        {
                            <button @onclick="() => ChooseOneEntityClicked(entity)" type="button" class="btn btn-outline-secondary">Выбрать</button>
                        }
                        else
                        {
                            <a class="btn btn-outline-secondary" href="@($"/{View.GetEntityNames()}/{entity["Id"]}")" role="button">
                                <i class="bi bi-search"></i>
                            </a>
                        }
                    </td>
                    @foreach (var key in entity.Keys)
                    {
                        <td>@(entity[key])</td>
                    }
                    @if (DeleteButtonVisible)
                    {
                        <td>
                            <button @onclick="async () => await TrClickedDelete(entity)" type="button" class="btn btn-danger">Удалить</button>
                        </td>
                    }

                </tr>
            }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public IView View { get; set; }

    //private Dictionary<string, string> _fieldDisplayNames = new();

    private List<Column> _columns = new();

    //private List<BaseView> _views = new();

    private List<Dictionary<string, string>> _entities = new();

    [Parameter]
    public bool CreateButtonVisible { get; set; } = true;

    public bool Loading { get; set; } = true;

    [Parameter]
    public bool ChooseOneEntity { get; set; } = false;

    [Parameter]
    public bool DeleteButtonVisible { get; set; } = true;

    [Parameter]
    public bool ShowHeader { get; set; } = true;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    public List<TEntity> Entities { get; set; } = new List<TEntity>();

    private string _searchText;

    public string SearchText
    {
        get
        {
            return _searchText;
        }
        set
        {
            _searchText = value;
            SearchTextIsDirty = true;
        }
    }

    public bool SearchTextIsDirty { get; set; } = false;

    public int EntitiesTotalCount { get; set; }

    public int PageSize { get; set; } = 50;

    public int CurrentPage { get; set; } = 1;

    public int TotalPages { get; set; }

    public string SortingColumn { get; set; } = "Id";

    public bool SortingDescending { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    public async Task LoadData()
    {
        Loading = true;

        var props = View
            .GetType()
            .GetProperties()
            .Select(x => new
            {
                PropertyInfo = x,
                FieldAttribute = x.GetCustomAttribute<FieldAttribute>(),
                BindAttribute = x.GetCustomAttribute<RazorClassLibrary.BindAttribute>(),
                SortAttribute = x.GetCustomAttribute<SortAttribute>(),
            })
            .Where(x => x.FieldAttribute != null)
            .ToList();

        _columns = props
            .Where(x => !x.FieldAttribute.Serviced)
            //.Select(x => x.FieldAttribute.DisplayName)
            //.ToList();
            //.ToDictionary(x => x.PropertyInfo.Name, x => x.FieldAttribute.DisplayName);
            .Select(x => new Column
                {
                    PropertyName = x.PropertyInfo.Name,
                    DisplayName = x.FieldAttribute.DisplayName,
                    SortingKey = x.SortAttribute != null
                                            ? x.SortAttribute.Sort
                                            : x.BindAttribute != null
                                                ? $"{x.BindAttribute.Bind}"
                                                : $"{x.PropertyInfo.Name}"
                })
            .ToList();

        var data = View.GetData(SearchText).Cast<TEntity>().AsNoTracking();

        if (!string.IsNullOrEmpty(SortingColumn))
        {
            data = data.OrderBy($"{_columns.FirstOrDefault(x => x.PropertyName == SortingColumn).SortingKey}{(SortingDescending ? " desc" : "")}");
        }

        EntitiesTotalCount = data.Count();

        TotalPages = (int)Math.Ceiling(EntitiesTotalCount / (decimal)PageSize);

        var paginatedData = data.Skip(PageSize * (CurrentPage - 1)).Take(PageSize);

        // если находимся на например десятой странице и ищем что-то,
        // то страниц становится меньше, делаем первую
        if (CurrentPage != 1 && paginatedData.Count() == 0)
        {
            CurrentPage = 1;
            paginatedData = data.Skip(PageSize * (CurrentPage - 1)).Take(PageSize);
        }

        Entities = await paginatedData.ToListAsync();

        //#if DEBUG
        //    await Task.Delay(500);
        //#endif

        _entities = new List<Dictionary<string, string>>();

        foreach (var entity in Entities)
        {
            var viewType = View.GetType();
            var newView = Activator.CreateInstance(viewType);

            var fieldNameValue = new Dictionary<string, string>();

            foreach (var prop in props)
            {
                if (prop.BindAttribute != null)
                {
                    var relatedEntityValue = Extensions.GetPropertyValue(entity, prop.BindAttribute.Bind);
                    fieldNameValue.Add(prop.PropertyInfo.Name, $"{relatedEntityValue}");
                    continue;
                }

                var entityProp = entity.GetType().GetProperty(prop.PropertyInfo.Name);
                var entityValue = entityProp?.GetValue(entity);
                //todo проверка типов?
                var newViewProp = newView.GetType().GetProperty(prop.PropertyInfo.Name);

                if (newViewProp.SetMethod != null)
                {
                    newViewProp.SetValue(newView, entityValue);
                }

                var newViewPropValue = newViewProp.GetValue(newView);

                if (!prop.FieldAttribute.Serviced)
                {
                    var formattable = newViewPropValue as IFormattable;

                    if (formattable != null && !string.IsNullOrEmpty(prop.FieldAttribute.Format))
                    {
                        fieldNameValue.Add(prop.PropertyInfo.Name, formattable.ToString(prop.FieldAttribute.Format, null));
                    }
                    else
                    {
                        fieldNameValue.Add(prop.PropertyInfo.Name, $"{newViewPropValue}");
                    }
                }
            }

            _entities.Add(fieldNameValue);
        }

        SearchTextIsDirty = false;
        Loading = false;
    }

    public void ChooseOneEntityClicked(Dictionary<string, string> entity)
    {
        var id = int.Parse(entity["Id"]);

        BlazoredModal.CloseAsync(ModalResult.Ok(Entities.FirstOrDefault(x => x.Id == id)));
    }

    public async Task TrClickedDelete(Dictionary<string, string> entity)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Удалить запись?");

        if (!confirmed)
        {
            return;
        }

        var entity2 = await _context.Set<TEntity>().FindAsync(int.Parse(entity["Id"]));
        _context.Remove(entity2);
        await _context.SaveChangesAsync();

        await LoadData();
    }

    public void Create()
    {
        NavigationManager.NavigateTo($"/{View.GetEntityNames()}/0");
    }

    private Stream GetFileStream()
    {
        var columns = string.Join(",", _columns.Select(x => Helper.StringToCSVCell(x.DisplayName)));

        var data = $"";

        foreach (var entity in _entities)
        {
            data += $"{string.Join(",", entity.Values.Select(x => Helper.StringToCSVCell(x)))}\r\n";
        }

        var fileStream = new MemoryStream(Encoding.UTF8.GetBytes($"{columns}\r\n{data}"));

        return fileStream;
    }

    private async Task DownloadFileFromStream()
    {
        var fileStream = GetFileStream();
        var fileName = $"{DateTime.UtcNow:yyyy-MM-dd_HH-mm-ss}.csv";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    public async Task SearchTextInputEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await LoadData();
        }
    }

    public async Task ClearSearchText()
    {
        SearchText = "";
        await LoadData();
    }

    public async Task FirstPageClick()
    {
        CurrentPage = 1;
        await LoadData();
    }

    public async Task PreviousPageClick()
    {
        CurrentPage--;
        await LoadData();
    }

    public async Task NextPageClick()
    {
        CurrentPage++;
        await LoadData();
    }

    public async Task LastPageClick()
    {
        CurrentPage = TotalPages;
        await LoadData();
    }

    public async Task OnColumnClick(string columnKey)
    {
        //Console.WriteLine($"OnColumnClick: columnKey: {columnKey}");

        if (SortingColumn != columnKey)
        {
            SortingColumn = columnKey;
            SortingDescending = false;
        }
        else
        {
            if (!SortingDescending)
            {
                SortingDescending = true;
            }
            else
            {
                SortingColumn = "";
            }
        }

        await LoadData();
    }

    public class Column
    {
        public string PropertyName { get; set; }

        public string DisplayName { get; set; }

        public string SortingKey { get; set; }
    }
}