@typeparam TEntity

@using Microsoft.EntityFrameworkCore
@using System.Linq.Expressions
@inject NavigationManager NavigationManager

<input class="form-control @FieldCssClasses" value="@Entity" type="text" readonly />

<button class="btn btn-outline-secondary" type="button" @onclick="Clear" title="Очистить">
    <i class="bi bi-x-lg"></i>
</button>

@if (Entity == null)
{
    <a class="btn btn-outline-secondary" role="button" title="Открыть">
        <i class="bi bi-search"></i>
    </a>
}
else
{
    <a class="btn btn-outline-secondary" role="button" title="Открыть"
   href="@($"/{View.GetEntityNames()}/{Entity.Id}")">
        <i class="bi bi-search"></i>
    </a>
}

<button class="btn btn-outline-secondary" type="button" @onclick="Open" title="Выбрать">
    <i class="bi bi-three-dots"></i>
</button>

@code {

    [CascadingParameter]
    private EditContext CascadedEditContext { get; set; }

    [Parameter]
    public TEntity Entity { get; set; }

    [Parameter]
    public EventCallback<TEntity> EntityChanged { get; set; }

    [Parameter]
    public Expression<Func<TEntity>> EntityExpression { get; set; }

    [Parameter]
    public IView View { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; } = default!;

    private FieldIdentifier _fieldIdentifier;

    private EditContext _editContext;

    private string FieldCssClasses => _editContext?.FieldCssClass(_fieldIdentifier) ?? "";

    protected override void OnInitialized()
    {
        _editContext = CascadedEditContext;
        _fieldIdentifier = FieldIdentifier.Create(EntityExpression);
    }

    public async Task Open()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(View), View);
        parameters.Add("CreateButtonVisible", false);
        parameters.Add("ChooseOneEntity", true);
        parameters.Add("DeleteButtonVisible", false);
        parameters.Add("ShowHeader", false);

        var modal = Modal.Show<DataGridComponent<TEntity>>(View.GetNames(), parameters);
        var modalResult = await modal.Result;

        if (modalResult.Confirmed)
        {
            Entity = ((TEntity)modalResult.Data);
            await EntityChanged.InvokeAsync(Entity);
            CascadedEditContext?.NotifyFieldChanged(_fieldIdentifier);
        }
    }

    public async Task Clear()
    {
        Entity = null;
        await EntityChanged.InvokeAsync(Entity);
        CascadedEditContext?.NotifyFieldChanged(_fieldIdentifier);
    }
}
